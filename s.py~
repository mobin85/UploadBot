import asyncio
import os
import socket

from fastapi import FastAPI
from pyrogram import Client, filters
from pyrogram.types.messages_and_media.message import Message

# TOKEN = "5608115116:AAH4znjXgOf0Z9-OXtStak87peQ1jsG3c00"
# bot = telebot.AsyncTeleBot(TOKEN)
# CHAT = 720150634
# r = ""

API_ID, API_HASH = 10956167, 'a8c9c00407e2b74b23fdc72596ae6d87'
QUESTION_BOT_USER = "GPTchat_irbot"


class NewFastAPI(FastAPI, Client):
    def __init__(self):
        FastAPI.__init__(self)
        Client.__init__(self, "bt1", API_ID, API_HASH, phone_number='989330659028')
        self._look = asyncio.Lock()
        self.messages: dict[int, Message] = {}

        @self.on_event("startup")
        async def startup():
            await self.start()
            print('started')

        @self.get("/api/{message}")
        async def process_message(message: str):
            await asyncio.sleep(2)
            m: Message = await self.send_message(QUESTION_BOT_USER, f"{message}")
            # return await self.helper_response(m, 1, False)
            i = 0
            while not (m.id in self.messages):
                i += 1
                if i >= 45:
                    return {"success": False}
                await asyncio.sleep(2.7)
            await asyncio.sleep(i)
            msg = "\n".join(self.messages[m.id].text.splitlines()[:-2])
            return {"success": True, "response": msg}

        @self.on_event("shutdown")
        async def shutdown():
            await self.stop()

        @self.on_edited_message(filters=filters.chat(QUESTION_BOT_USER))
        async def test(_, msg: Message):
            await self._look.acquire()
            self.messages.update({msg.reply_to_message_id: msg})
            self._look.release()
    # async def helper_response(self, msg, i, rec):
    #     if not rec:
    #         await asyncio.sleep(5)
    #     else:
    #         await asyncio.sleep(3)
    #     response = await self.get_messages(msg.chat.id, msg.id + i)
    #     if not response:
    #         return {"success": False}
    #     if response.reply_to_message_id != msg.id:
    #         if i <= 10:
    #             return await self.helper_response(msg, i + 1, True)
    #         elif i >= 10:
    #             return await self.helper_response(msg, i - 1, True)
    #     else:
    #         return {"success": True, "response": response.text}


# @app.get("/api/{message}")
# async def process_message(message: str):
#     global r
#     await bot.send_message(CHAT, message)
#     await asyncio.sleep(3)
#     if not r:
#         await asyncio.sleep(3)
#     return {"success": True, "response": r}
#     # return {"success": False}


# @bot.message_handler()
# async def echo(msg: Message):
#     global r
#     if msg.chat.id == CHAT:
#         r = msg.text
#     return
#
#
# asyncio.gather(bot.infinity_polling())

app = NewFastAPI()
if __name__ == '__main__':
    os.system(
        f'uvicorn {os.path.splitext(os.path.basename(__file__))[0]}:app --host {socket.gethostbyname(socket.gethostname())} --port 8001')
